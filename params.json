{
  "name": "Python-jrpc",
  "tagline": "A Python remote procedure call framework that uses JSON RPC v2.0",
  "body": "Python-JRPC\r\n===========\r\n\r\nA Python remote procedure call framework that uses JSON RPC v2.0\r\n\r\nInstall using pip:\r\n\r\n```\r\npip install python-jrpc\r\n```\r\n\r\n# Socket Based Usage\r\n\r\nPython-JRPC allows programmers to create powerful client/server programs with very little code.\r\nHere's an example of a server and client:\r\n\r\n## Server\r\n\r\n```python\r\nimport jrpc\r\n\r\nclass SimpleService(jrpc.service.SocketObject):\r\n    @jrpc.service.method\r\n    def echo(self, msg):\r\n        return msg\r\n\r\nserver = SimpleService(50001) #Include the listening port\r\nserver.run_wait()\r\n```\r\n\r\n## Client\r\n\r\n```python\r\nimport jrpc\r\n\r\nserver = None\r\nserver = jrpc.service.SocketProxy(50001) #The server's listening port\r\nprint server.echo(\"Hello World!\")\r\n```\r\n\r\n# Web Based (Flask) Usage\r\n\r\nA recent addition to Python JRPC offers Flask integration.\r\nUsing this feature, client side Javascript can easily call webservice API methods.\r\n\r\n## Flask App\r\n```python\r\nfrom jrpc.web import *\r\nimport jrpc.service\r\nfrom flask import Flask, render_template\r\n\r\napp = Flask(__name__)\r\n\r\nclass WebService(JRPCBlueprint):\r\n    def __init__(self):\r\n        JRPCBlueprint.__init__(self, \"service\", __name__, url_prefix=\"/api\")\r\n\r\n    @jrpc.service.method(path = \"/echo/<name>\")\r\n    def echo(self, text, prefix = \"Hello from\", name = \"\"):\r\n        return {\"subject\": prefix + \" \" + name, \"message\": text}\r\n\r\napp.register_blueprint(WebService())\r\n\r\n@app.route('/')\r\ndef index():\r\n    return render_template(\"index.html\")\r\napp.run(host='0.0.0.0', port=8080, debug=True)\r\n```\r\n\r\n## Index.html Javascript\r\n\r\n```javascript\r\njrpc(\"/api\").done(function(api) {\r\n    api.echo({name: \"Python JRPC\", text: \"Now with more Flask\"}).done(function(result) {\r\n        $(\"#result\").text(JSON.stringify(result));\r\n    });\r\n});\r\n```\r\n\r\n## Result\r\n```json\r\n{\"subject\":\"Hello from Python JRPC\", \"message\":\"Now with more Flask\"}\r\n```\r\n\r\n# Why Use It?\r\n\r\nPython-JRPC takes all of the boiler-plate code out of your network applications.\r\nForget reading through socket documentation and developing your own message formats.\r\nMaking Flask web services is streamlined by not having to read request arguments, or remember which arguments are passed in the URL.\r\nAll you need to do is write your Python server/client logic and let Python-JRPC handle the networking for you.\r\nHere's what you get:\r\n\r\n- Remote method call with JSON serializable parameters/return values\r\n- Synchronization/thread safety in servers/clients\r\n- Remote exception passing (When calling a remote method in a client, exceptions thrown by the server code will be thrown locally!)\r\n- Simplified Flask applications, client side Javascript can easily call webservice API methods",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}