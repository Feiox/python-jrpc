{"name":"Python-jrpc","tagline":"A Python remote procedure call framework that uses JSON RPC v2.0","body":"# Usage\r\n\r\nPython-JRPC allows programmers to create powerful client/server programs with very little code.\r\nHere's an example of a server and client:\r\n\r\n## Server\r\n\r\n```python\r\nimport jrpc\r\n\r\nclass SimpleService(jrpc.service.SocketObject):\r\n    @jrpc.service.method\r\n    def echo(self, msg):\r\n        return msg\r\n\r\nserver = SimpleService(50001) #Include the listening port\r\nserver.run_wait()\r\n```\r\n\r\n## Client\r\n\r\n```python\r\nimport jrpc\r\n\r\nserver = None\r\nserver = jrpc.service.SocketProxy(50001) #The server's listening port\r\nprint server.echo(\"Hello World!\")\r\n```\r\n\r\n# Why Use It?\r\n\r\nPython-JRPC takes all of the boiler-plate code out of your network applications.\r\nForget reading through socket documentation and developing your own message formats.\r\nAll you need to do is write your Python server/client logic and let Python-JRPC handle the networking for you.\r\nHere's what you get:\r\n\r\n- Remote method call with JSON serializable parameters/return values\r\n- Synchronization/thread safety in servers/clients\r\n- Remote exception passing (When calling a remote method in a client, exceptions thrown by the server code will be thrown locally!)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}